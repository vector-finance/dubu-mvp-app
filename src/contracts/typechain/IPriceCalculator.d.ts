/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IPriceCalculatorInterface extends ethers.utils.Interface {
  functions: {
    "pricesInUSD(address[])": FunctionFragment;
    "valueOfAsset(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "pricesInUSD",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "valueOfAsset",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "pricesInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueOfAsset",
    data: BytesLike
  ): Result;

  events: {};
}

export class IPriceCalculator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IPriceCalculatorInterface;

  functions: {
    pricesInUSD(
      assets: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "pricesInUSD(address[])"(
      assets: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    valueOfAsset(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { valueInBNB: BigNumber; valueInUSD: BigNumber }
    >;

    "valueOfAsset(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { valueInBNB: BigNumber; valueInUSD: BigNumber }
    >;
  };

  pricesInUSD(
    assets: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "pricesInUSD(address[])"(
    assets: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  valueOfAsset(
    asset: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { valueInBNB: BigNumber; valueInUSD: BigNumber }
  >;

  "valueOfAsset(address,uint256)"(
    asset: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { valueInBNB: BigNumber; valueInUSD: BigNumber }
  >;

  callStatic: {
    pricesInUSD(
      assets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "pricesInUSD(address[])"(
      assets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    valueOfAsset(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { valueInBNB: BigNumber; valueInUSD: BigNumber }
    >;

    "valueOfAsset(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { valueInBNB: BigNumber; valueInUSD: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    pricesInUSD(
      assets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pricesInUSD(address[])"(
      assets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueOfAsset(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "valueOfAsset(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    pricesInUSD(
      assets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pricesInUSD(address[])"(
      assets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueOfAsset(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "valueOfAsset(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
